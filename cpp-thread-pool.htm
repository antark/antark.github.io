<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>c++线程池实现  - 文琼</title>
    <link rel="stylesheet" href="http://www.lrj.name/stylesheets/main.css">
    <!-- 语法高亮 -->
    <script src="http://www.lrj.name/plugins/google-code-prettify/run_prettify.js"></script>
    <link href="http://www.lrj.name/plugins/google-code-prettify/skins/tomorrow.css" type="text/css" rel="stylesheet" />
</head>
<body>
<div class="ilovers">
<p>咳咳。c++11 加入了线程库，从此告别了标准库不支持并发的历史。然而 c++ 对于多线程的支持还是比较低级，稍微高级一点的用法都需要自己去实现，譬如线程池、信号量等。线程池(thread pool)这个东西，在面试上多次被问到，一般的回答都是：“管理一个任务队列，一个线程队列，然后每次取一个任务分配给一个线程去做，循环往复。” 貌似没有问题吧。但是写起程序来的时候就出问题了。</p>
<p>废话不多说，先上实现，然后再啰嗦。(dont talk, show me ur code !)</p>
<pre><code class="prettyprint linenums lang-cpp">#ifndef ILOVERS_THREAD_POOL_H
#define ILOVERS_THREAD_POOL_H

#include &lt;iostream&gt;
#include &lt;functional&gt;
#include &lt;thread&gt;
#include &lt;condition_variable&gt;
#include &lt;future&gt;
#include &lt;atomic&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;

// 命名空间
namespace ilovers {
    class TaskExecutor;
}

class ilovers::TaskExecutor{
    using Task = std::function&lt;void()&gt;;
private:
    // 线程池
    std::vector&lt;std::thread&gt; pool;
    // 任务队列
    std::queue&lt;Task&gt; tasks;
    // 同步
    std::mutex m_task;
    std::condition_variable cv_task;
    // 是否关闭提交
    std::atomic&lt;bool&gt; stop;
    
public:
    // 构造
    TaskExecutor(size_t size = 4): stop {false}{
        size = size &lt; 1 ? 1 : size;
        for(size_t i = 0; i&lt; size; ++i){
            pool.emplace_back(&amp;TaskExecutor::schedual, this);    // push_back(std::thread{...})
        }
    }
    
    // 析构
    ~TaskExecutor(){
        for(std::thread&amp; thread : pool){
            thread.detach();    // 让线程“自生自灭”
            //thread.join();        // 等待任务结束， 前提：线程一定会执行完
        }
    }
    
    // 停止任务提交
    void shutdown(){
        this-&gt;stop.store(true);
    }
    
    // 重启任务提交
    void restart(){
        this-&gt;stop.store(false);
    }
    
    // 提交一个任务
    template&lt;class F, class... Args&gt;
    auto commit(F&amp;&amp; f, Args&amp;&amp;... args) -&gt;std::future&lt;decltype(f(args...))&gt; {
        if(stop.load()){    // stop == true ??
            throw std::runtime_error("task executor have closed commit.");
        }
        
        using ResType =  decltype(f(args...));    // typename std::result_of&lt;F(Args...)&gt;::type, 函数 f 的返回值类型
        auto task = std::make_shared&lt;std::packaged_task&lt;ResType()&gt;&gt;(
                        std::bind(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...)
                );    // wtf !
        {    // 添加任务到队列
            std::lock_guard&lt;std::mutex&gt; lock {m_task};
            tasks.emplace([task](){   // push(Task{...})
                (*task)();
            });
        }
        cv_task.notify_all();    // 唤醒线程执行
        
        std::future&lt;ResType&gt; future = task-&gt;get_future();
        return future;
    }
    
private:
    // 获取一个待执行的 task
    Task get_one_task(){
        std::unique_lock&lt;std::mutex&gt; lock {m_task};
        cv_task.wait(lock, [this](){ return !tasks.empty(); });    // wait 直到有 task
        Task task {std::move(tasks.front())};    // 取一个 task
        tasks.pop();
        return task;
    }
    
    // 任务调度
    void schedual(){
        while(true){
            if(Task task = get_one_task()){
                task();    //
            }else{
                // return;    // done
            }
        }
    }
};

#endif

void f()
{
    std::cout &lt;&lt; "hello, f !" &lt;&lt; std::endl;
}

struct G{
    int operator()(){
        std::cout &lt;&lt; "hello, g !" &lt;&lt; std::endl;
        return 42;
    }
};


int main()
try{
    ilovers::TaskExecutor executor {10};
    
    std::future&lt;void&gt; ff = executor.commit(f);
    std::future&lt;int&gt; fg = executor.commit(G{});
    std::future&lt;std::string&gt; fh = executor.commit([]()-&gt;std::string { std::cout &lt;&lt; "hello, h !" &lt;&lt; std::endl; return "hello,fh !";});
    
    executor.shutdown();
    
    ff.get();
    std::cout &lt;&lt; fg.get() &lt;&lt; " " &lt;&lt; fh.get() &lt;&lt; std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(5));
    executor.restart();    // 重启任务
    executor.commit(f).get();    //
    
    std::cout &lt;&lt; "end..." &lt;&lt; std::endl;
    return 0;
}catch(std::exception&amp; e){
    std::cout &lt;&lt; "some unhappy happened... " &lt;&lt; e.what() &lt;&lt; std::endl;
}
</code></pre>
<p>为了避嫌，先进行一下版权说明：代码是 me “写”的，但是思路来自 Internet， 特别是<a href="https://github.com/progschj/ThreadPool">这个线程池实现</a>(窝的实现，基本 copy 了这个实现，好东西值得 copy !)。</p>
<h2>实现原理</h2>
<p>接着前面的废话说。“管理一个任务队列，一个线程队列，然后每次取一个任务分配给一个线程去做，循环往复。” 这个思路有神马问题？线程池一般要复用线程，所以如果是取一个 task 分配给某一个 thread，执行完之后再重新分配，在语言层面基本都是不支持的：一般语言的 thread 都是执行一个固定的 task 函数，执行完毕线程也就结束了(至少 c++ 是这样)。so 要如何实现 task 和 thread 的分配呢？</p>
<p class="red"><strong>让每一个 thread 都去执行调度函数：循环获取一个 task，然后执行之。</strong></p>
<p>idea 是不是很赞！保证了 thread 函数的唯一性，而且复用线程执行 task 。</p>
<p>即使理解了 idea，me 想代码还是需要详细解释一下的。</p>
<ol>
<li>一个线程 pool，一个任务队列 queue ，应该没有意见；</li>
<li>任务队列是典型的<span class="red">生产者-消费者模型</span>，本模型至少需要两个工具：一个 mutex + 一个条件变量，或是一个 mutex + 一个信号量。mutex 实际上就是锁，保证任务的添加和移除(获取)的互斥性，一个条件变量是保证获取 task 的同步性：一个 empty 的队列，线程应该等待(阻塞)；</li>
<li>stop 控制任务提交，是受了 Java 的影响，还有实现类不叫 ThreadPool 而是叫 TaskExecutor；</li> <li>atomic&lt;bool&gt; 本身是原子类型，从名字上就懂：它们的操作 load()/store() 是原子操作，所以不需要再加 mutex。</li>
</ol>
<h2>c++语言细节</h2>
<p>即使懂原理也不代表能写出程序，上面用了众多c++11的“奇技淫巧”，下面简单描述之。</p>
<ol>
<li>using Task = function&lt;void()&gt; 是类型别名，简化了 typedef 的用法。function&lt;void()&gt; 可以认为是一个函数类型，接受任意原型是 void() 的函数，或是函数对象，或是匿名函数。void() 意思是不带参数，没有返回值。最初的实现版本 Task 类型不是单纯的函数类型，而是一个 class，包含一个 status 字段，表明 Task 的状态：未调度、执行中、执行结束。后来因为简化，故删掉了。</li>
<li>pool.emplace_back(&amp;TaskExecutor::schedual, this); 和 pool.push_back(thread{&amp;TaskExecutor::schedual, this}) 功能一样，只不过前者性能会更好；</li>
<li>thread{&amp;TaskExecutor::schedual, this} 是构造了一个线程对象，执行函数是成员函数 TaskExecutor::schedual ；</li>
<li>所有对象的初始化方式均采用了 {}，而不再使用之前的 () 方式，因为风格不够一致且容易出错；</li>
<li>匿名函数： [](int a, int b)-&gt;int { return a+b; } 不多说。[] 是捕捉器，&amp;r 是引用域外的变量 r， =r 是拷贝域外的 r 值；</li>
<li>delctype(expr) 用来推断 expr 的类型，和 auto 是类似的，相当于类型占位符，占据一个类型的位置；auto f(A a, B b) -&gt; decltype(a+b) 是一种用法，不能写作 decltype(a+b) f(A a, B b)，为啥？！ c++ 就是这么规定的！</li>
<li>commit 方法是不是略奇葩！可以带任意多的参数，第一个参数是 f，后面依次是函数 f 的参数！ 可变参数模板是 c++11 的一大亮点，够亮！至于为什么是 Arg... 和 arg... ，因为规定就是这么用的！</li>
<li>make_shared 用来构造 shared_ptr 智能指针。用法大体是 shared_ptr&lt;int&gt; p = make_shared&lt;int&gt;(4) 然后 *p == 4 。智能指针的好处就是， 自动 delete ！</li>
<li>bind 函数，接受函数 f 和部分参数，返回currying后的匿名函数，譬如 bind(add, 4) 可以实现类似 add4 的函数！</li>
<li>forward() 函数，类似于 move() 函数，后者是将参数右值化，前者是... 肿么说呢？大概意思就是：不改变最初传入的类型的引用类型(左值还是左值，右值还是右值)；</li>
<li>packaged_task 就是任务函数的封装类，通过 get_future 获取 future ， 然后通过 future 可以获取函数的返回值(future.get())；packaged_task 本身可以像函数一样调用 () ；</li>
<li>queue 是队列类， front() 获取头部元素， pop() 移除头部元素；back() 获取尾部元素，push() 尾部添加元素；</li>
<li>lock_guard 是 mutex 的 stack 封装类，构造的时候 lock()，析构的时候 unlock()，是 c++ RAII 的 idea；</li>
<li>condition_variable cv; 条件变量， 需要配合 unique_lock 使用；unique_lock 相比 lock_guard 的好处是：可以随时 unlock() 和 lock()。 cv.wait() 之前需要持有 mutex，wait 本身会 unlock() mutex，如果条件满足则会重新持有 mutex。</li>
</ol>
<h2>结束语</h2>
<p>是不是感觉有些反人类！</p>
</div>
</body>
